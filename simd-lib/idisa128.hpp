
/* Copyright (c) 2011, Hua Huang, Meng Lin and Robert D. Cameron.
   Licensed under the Academic Free License 3.0.
   This file is generated by the IDISA+ generator;
   modifications should be made only by changing the
   generator configuration and data files. */

#ifndef IDISA128_HPP
#define IDISA128_HPP

#if defined USE_SSE3
#include "idisa_cpp/idisa_sse3.cpp"
#elif defined USE_SSSE3
#include "idisa_cpp/idisa_ssse3.cpp"
#elif defined USE_SSE4_1
#include "idisa_cpp/idisa_sse4_1.cpp"
#elif defined USE_SSE4_2
#include "idisa_cpp/idisa_sse4_2.cpp"
#elif defined USE_NEON
#include "idisa_cpp/idisa_neon.cpp"
#else
#include "idisa_cpp/idisa_sse2.cpp"
#endif
		
#ifndef FIELD_TYPE
#define FIELD_TYPE	
template <uint32_t fw> struct FieldType {
   typedef int T;  //default for FieldType::T is int
};

template <> struct FieldType<1> {typedef uint8_t T;};
template <> struct FieldType<2> {typedef uint8_t T;};
template <> struct FieldType<4> {typedef uint8_t T;};
template <> struct FieldType<8> {typedef uint8_t T;};
template <> struct FieldType<16> {typedef uint16_t T;};
template <> struct FieldType<32> {typedef uint32_t T;};
template <> struct FieldType<64> {typedef uint64_t T;};
template <> struct FieldType<128> {typedef uint64_t T;};
template <> struct FieldType<256> {typedef uint64_t T;};
#endif

#endif
